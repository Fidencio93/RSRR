function [y1] = Fcn_Red_Qp_4(x1)
%FCN_RED_QP_4 neural network simulation function.
%
% Auto-generated by MATLAB, 06-Sep-2021 10:49:57.
% 
% [y1] = Fcn_Red_Qp_4(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-116.063060960018;-116.229534617895];
x1_step1.gain = [0.00861222819736077;0.00860324037730651];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.1575353061507973607;-0.75072742363019462353;2.5275877037321725638;0.80253007286762023664;1.9595495513868339543;2.1542191285239935539;-0.8424491765212012151;1.5712042739744620512;4.4596246656485210025;2.7403161501273451961];
IW1_1 = [0.43692604945098734159 -1.3779281377735277392;-0.99274330110294850549 0.62904896681289679261;-1.2748931061087327432 0.059107735720868276319;1.2035518202359696271 -0.9527582830897985966;0.18244527025290796507 -1.3415279459509317217;0.27700347508429118415 -2.076196664377085721;-1.1742965268077349972 0.23967587664514361512;3.4788221112877066865 2.2053627493480791877;3.1474723918729092809 -0.26725648107473454207;0.045136006156841539105 -1.6029957344591605484];

% Layer 2
b2 = 39.514453361690655697;
LW2_1 = [6.1322928054298051492 -33.610183290948882018 -15.960460866417019332 -13.532831826248264306 -52.633388659834913881 10.129047014038190966 16.759241656620776695 -0.12147632180890739761 -8.7711507557027061921 28.700479605995624865];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.045793148506551;
y1_step1.xoffset = 0.02353331325223;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
