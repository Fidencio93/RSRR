function [y1] = Fcn_Red_Qp_5(x1)
%FCN_RED_QP_5 neural network simulation function.
%
% Auto-generated by MATLAB, 06-Sep-2021 10:49:57.
% 
% [y1] = Fcn_Red_Qp_5(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-116.063060960018;-116.229534617895];
x1_step1.gain = [0.00861222819736077;0.00860324037730651];
x1_step1.ymin = -1;

% Layer 1
b1 = [10.469663218368904012;-6.2649980546547050508;0.98836302645188689464;2.1145159362232841538;-5.188357267731193545;-4.6607388289547824201;-1.0727295779852361601;0.87496103213953269062;-2.7590005185853332392;-0.23269920865484627903;-0.90167476608775587454;0.82627073258065963923;1.1213094035755781785;-2.8907704435193397607;4.6043560024645531215;-4.9795455434275721629;1.2418238004655013373;-1.8324311946585984945;6.2722105396245089182;-6.7917730009246666256];
IW1_1 = [-0.9217986560178400568 -1.0101268755762842222;-5.7287586722876104872 1.8734145055668736113;-1.0972396822634018498 0.26739145538835651372;-3.5688453971529301434 2.099891252719372492;4.5211213995808083865 7.4779278923471537155;2.9564965396908964301 8.7657261305312914601;1.1828269821645769344 3.6817294585531756823;-1.4583182339964111396 0.22445950113386656244;3.4188621500746658732 -4.0518142448280247692;-2.335837578876195586 -1.0177217619587437536;1.2979558304960856496 -0.25641808096197576949;-2.3218297829319527459 2.395962993926944673;1.9363962567665693459 -2.5627787143684548354;-2.8208424486219740857 3.9267866449582773392;-2.9266030750224345525 -8.6612582642821731582;-0.80709423607541752599 4.6315961912997076766;0.96053676809075771992 2.6629666072649689212;-3.2508550432074985181 -0.59093346243734667933;-0.82295480599050807591 6.0841695062750353884;-5.3720031371641674411 -3.9908693426587800168];

% Layer 2
b2 = 12.015085778573197928;
LW2_1 = [6.7742169300906196483 1.0381384010758194503 -120.74717319519362491 -0.44657517495444126743 0.086358001349479518449 -10.08875175853959405 0.63603571790832014177 -110.85914041758785231 0.32759609491341812326 0.78704801979370409004 -218.19721257929526814 -0.87111282481195861926 -0.86033745988968912677 0.20620926457287597211 -10.407447481156816949 1.6436517154001730745 -1.0387981040862512838 0.71764251261485889621 -0.97808727012209151219 0.81584349202960315672];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.045793148506551;
y1_step1.xoffset = 0.02353331325223;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
