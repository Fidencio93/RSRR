function [y1] = Fcn_Red_Qr_4(x1)
%FCN_RED_QR_4 neural network simulation function.
%
% Auto-generated by MATLAB, 06-Sep-2021 10:49:57.
% 
% [y1] = Fcn_Red_Qr_4(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-116.063060960018;-116.229534617895];
x1_step1.gain = [0.00861222819736077;0.00860324037730651];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.7278718218209923041;-2.3905215495246565638;1.7129154592665287726;0.61321898652969286658;-1.6142438635999476482;0.017055046952736692412;-0.13324774689380264325;1.7749641631525916452;1.8295476607509391087;3.6107446354114696163];
IW1_1 = [-0.46467686198456137348 -2.394626276367000095;3.8755684552190077241 -1.3179041223834213614;-2.2212017103434940068 2.0762134161340997096;-0.030171168989821074008 -3.1310909141867351302;2.7373267107870633552 1.9843235292483820675;1.172943736924650926 2.1008795662009882577;0.94983100840967593648 -1.3398374689540386573;2.5140507032004606458 2.5397783310647041866;2.4383050356940279002 -2.6174126926171954466;1.5706013200164843369 1.6883298529631050044];

% Layer 2
b2 = [10.107991208436585495;-2.0604057272022955338;1.8951763708067823622;1.0608110521199540788;0.90032042777151655155;1.4473661242923903103;1.2154729064787233028;-1.5152225886056469584;-1.5098857002081293999;-1.456473531240623398];
LW2_1 = [-1.1993924420986927792 -0.24972738011583694995 -8.0960561940813118298 -1.4884148580094713754 5.360845747747117862 -1.5907734197924539021 -0.68070983911852711579 -5.9915660263241008465 -5.251141137523699598 8.4687378967792685813;1.6813301972789091998 1.004515947392755848 0.41121974079314316253 -1.2988220042299678525 -0.85936111519471924947 -0.27667910477611268316 -1.1324502100890707634 -3.415455631959179339 -2.3180480924339166293 0.76950108133424266477;-0.29860322473325318082 0.051105642042302744377 0.16571176335813589398 0.26748101641720828381 0.076320577654890725539 -0.24953862510988392143 0.32702750772055078077 -0.050449532918775318036 -0.12125904732693552901 -1.2912712017746548199;-0.53791323920362366096 0.3357521109988872432 -1.1081439949897711195 0.03313132828395543017 0.20912254549184228214 -0.19423425747242747952 0.30477638572112830673 -0.51392472074184625264 -0.48552467441389313141 0.33089259804228687845;0.53375945082460451996 -0.58385550379986550507 -1.9544283821480987751 -1.828079980552119288 0.073002677560358275599 -0.028304984268397163916 1.0284321960966182896 -1.12131430034758095 0.52529467920913064383 0.054905560487949603421;-0.85069659181075452103 -0.31512100679051735508 0.63429523659122877266 0.1431499222411398986 -0.68043445788273937413 -0.097996721872438505296 -2.7956574382584258309 0.42486555050396551669 1.7689074601783978391 -1.5914215266981224239;1.1236324146065748142 -1.2349499981305485097 1.0428999573316444227 0.42269035166847646057 -0.55049934804655209497 0.32789599569343919061 1.0604037551267584405 -0.41389141031647980196 -0.078865076592778707298 1.0814415213055954545;-0.77924384470202900932 -0.11699341078623860801 -0.044594190014034834624 0.11794593966022828835 0.01087398125311947461 -1.9127599053631676451 -0.25313369301534693889 -0.11692267434303683926 0.058600588881452725376 -0.48614919526834005081;-1.3485604538474620373 -3.5205162580607676226 1.1628846326238646558 -0.18385692368566025623 2.6153653941978594055 0.30831440049899205835 -0.52297288158459365182 -0.049709435704638711695 -0.07740818999913803844 0.78429036238987037688;-1.0944904673800885941 -0.15826076073128261812 1.3425525689705484211 -0.16934448945394883768 1.5841952665494289931 -0.37268127043122534214 0.40164211844216179959 0.79849991998747660293 -1.6269788790547319302 0.65406771310853450974];

% Layer 3
b3 = 0.53862965183708444439;
LW3_2 = [-2.4587173160363322566 -0.021408390555685368611 -1.6206083530304000728 0.47557083145325174112 -0.25741569679844839014 0.45374773202546048179 1.8017873550555292272 -0.46138559852091631797 -1.3911714475710819094 -0.077493440753271719545];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.382528974555994;
y1_step1.xoffset = -2.61075848464239;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);

% Layer 3
a3 = repmat(b3,1,Q) + LW3_2*a2;

% Output 1
y1 = mapminmax_reverse(a3,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
