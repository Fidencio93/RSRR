function [y1] = Fcn_Red_Qp_1(x1)
%FCN_RED_QP_1 neural network simulation function.
%
% Auto-generated by MATLAB, 06-Sep-2021 10:49:56.
% 
% [y1] = Fcn_Red_Qp_1(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-116.063060960018;-116.229534617895];
x1_step1.gain = [0.00861222819736077;0.00860324037730651];
x1_step1.ymin = -1;

% Layer 1
b1 = [-4.1739341538049989921;-0.58589784334805894428;-0.88396419520133839853;-0.63416068316204377009;1.563430109303001192;-0.086675304089318949696;-0.60724340093523232476;-0.84213785358030590622;-0.75018805888922335257;2.1551080039165682045];
IW1_1 = [2.970451005312036763 0.35060016453198966646;0.64302663535311821441 -1.0571707300812449581;0.45572746781518563841 -0.80826959151007071736;0.12790871331778619346 -1.1553708742397041931;-1.0277254649665636954 -0.33570940507210522696;-0.2607747082389025306 -0.88295523267397690859;-1.1426246102065418242 -0.082891382511498107322;-1.1634727690539632405 0.42223195707331634408;0.78089759238369338412 0.8436702378770070121;1.0367541163128206616 -1.0192224210210638624];

% Layer 2
b2 = [-1.1466132744854646841;19.387401174171579044;-19.423227470363457314;2.7193220770647332785;30.385780985099501095;1.5373453103754053384;6.8659167187258969278;7.3138802223332231023;-2.0718816106587802928;47.028982108919414884];
LW2_1 = [-7.4255729672121271179 2.9890248678697313167 -1.9950381784889943404 2.3760353440368890965 6.3749506502644512906 0.73092792433700581878 3.4346230877367318612 1.7964246675746122772 7.3418129195464247871 -1.3756439405234159867;-9.0002672654587811962 7.4185856685093209961 0.46033878039766779056 7.2238234880815346273 -10.327386373603305358 4.74005756717341864 4.1274630766032931461 14.601278884425768823 15.995446374414383328 5.2602170534534957724;8.9777179066587944334 -7.4130219857263908168 -0.43742395924546090269 -7.2373116492519651288 10.360193302135519033 -4.7454774979647158517 -4.107015457113479151 -14.616226881305239615 -15.984340467951243525 -5.2578853502922697771;-0.48045238918893368174 -1.1174187252196432496 3.1699845778304234223 -0.56601737066735113846 -0.42237087696735209352 0.46808353107567640672 1.219343914842669685 -2.1922452793663591564 1.1501370952011924498 -3.9136847180258915735;-6.8417390515561296027 -5.7620921310962476269 22.945984076974138333 -0.93884243761435104414 -0.35314959664632344927 9.1232822600516456646 8.8167384070194341206 1.9410226867537776485 19.820536783679784776 -17.279757303659966539;-2.6299395162124676872 -0.40456537486019072958 0.77339015891428664062 0.19511501510317630359 -0.41219570617243578292 2.1727233169597939266 0.94914615239366550981 -0.37859592348453585675 2.4789553777733930318 -3.7325560937839181719;-9.9281594807656539103 2.6011187184939199568 -3.9771306093242686508 -0.99583162968150495953 3.0290522581649885758 6.9689007867454293432 -0.092251684232829159193 2.1984822747556456157 8.5735986920575388837 -15.811159955423784496;-7.7398870321978368025 1.4955885936854349527 1.1586101097141106031 -0.28282281282573706882 3.3848179539975995489 3.7530296292418170445 0.92289525883285494778 1.9777679778586767512 6.8741196090907417116 -9.6721640554683645519;-0.059119272774135096793 1.6182865394645857826 -5.5786969229454355101 -0.84269599400653916188 2.8463739374291940898 1.9704059203566766101 0.17442575714904948181 -0.29173009027942053972 1.7824876376954665869 -3.8931946264762724574;-32.079159297572417131 13.473813397985722418 18.229170027589930214 38.695396991363331551 7.2839483927319363943 -13.145662427079839674 19.283116586525967051 45.193827300042009654 58.221712684520234404 20.593972192490117123];

% Layer 3
b3 = 11.084647828911144529;
LW3_2 = [-20.684952127406038613 11.567272076546366577 11.565764841634115001 12.377393625934638877 14.113236172101533583 8.0995646763061603934 -0.5653938140281464797 24.073614537921688594 1.4647478259676749435 19.738915473836289749];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.045793148506551;
y1_step1.xoffset = 0.02353331325223;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);

% Layer 3
a3 = repmat(b3,1,Q) + LW3_2*a2;

% Output 1
y1 = mapminmax_reverse(a3,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
